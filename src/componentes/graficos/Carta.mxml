<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   width="{this.height/2}" height="100%" fontSize="12" click="coCarta.open(this)">
	<fx:Script>
		<![CDATA[
			import clasesInternas.Duelo;
			
			import modelo.Modelo;
			
			import mx.core.IVisualElement;
			import mx.managers.PopUpManager;
			
			import spark.components.ViewNavigatorApplication;
			import spark.events.PopUpEvent;
			
			import views.PartidaView;
			
			import vo.CartaVO;
			public var cartaVisible:Boolean;
			[Bindable] public var img:String;
			[Bindable] public var opt:Boolean;
			[Bindable] public var cartaVO:CartaVO;
			public var fnInfo:Function;
			public var fnDeselecciona:Function;
			public var fnDefensa:Function;
			private var popInfo:PopupCarta = new PopupCarta();
			[Bindable] private var modelApp:Modelo = Modelo.getInstance();
			[Bindable] public var borde:Boolean = false;
			public var idUnico:int;
			[Bindable] public var ataqueHabilitado:Boolean = false;
			[Bindable] public var enJuego:Boolean = false;
			[Bindable] public var defensa:Boolean = false;
			public var zonaContenedora:Zona;
			public var eliminada:Boolean = false;
			[Bindable] public var accion:String;
			[Bindable] public var selectHab:Boolean;
			[Bindable] public var reversaDefensa:Boolean;
			public var contenedor:String = '';
			public var contenedorAnterior:String = '';
			public var propietario:String;
			public var envio:String;
			[Bindable] public var btnEfecto:Boolean;
			
			protected function infoCarta_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				//fnInfo.call(this, cartaVO);
				//	popInfo = new PopupCarta();
				
				//while(this.parentApplication)
				popInfo.cartaVO = this.cartaVO;
				popInfo.carta = this;
				popInfo.width = this.parentApplication.width;
				popInfo.height = this.parentApplication.height;
				PopUpManager.addPopUp(popInfo, this.parentApplication as ViewNavigatorApplication, true);
				PopUpManager.centerPopUp(popInfo);
				
			}
			
			protected function cartaClick_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
				
				borde = !borde; 
				if(fnDeselecciona != null){
					if(borde){
						if(this.parent['className'] == 'Zona'){
							Zona(this.parent).cartaSelect = this;
							Zona(this.parent).cartaSelectB = true;
							
							if(Zona(this.parent).id == 'zonaEfecto'){
								if(Zona(this.parent).arrCartaSelect.length < Zona(this.parent).cantidadSeleccionable){
									Zona(this.parent).arrCartaSelect.push(this);
								} else {
									fnDeselecciona.call(this, this, this.parent);	
								}
							} else {
								fnDeselecciona.call(this, this, this.parent);
							}
							
							
							
						} else {
							Zona(this.parent.parent).cartaSelect = this;
							Zona(this.parent.parent).cartaSelectB = true;	
							fnDeselecciona.call(this, this, this.parent.parent);
						}
						
						
					} else {
						if(this.parent['className'] == 'Zona'){
							var n:int = Zona(this.parent).arrCartaSelect.length;
							for(var i:int = 0; i < n; i++){
								if(Zona(this.parent).arrCartaSelect[i] == Zona(this.parent).cartaSelect){
									break;
								} 	
							}
							
							for(i = 0; i < n - 1; i++){
								Zona(this.parent).arrCartaSelect[i] = Zona(this.parent).arrCartaSelect[i + 1];
							}
							Zona(this.parent).arrCartaSelect.pop();
							Zona(this.parent).cartaSelect = null;
							Zona(this.parent).cartaSelectB = false;
						} else {
							Zona(this.parent.parent).cartaSelect = null;
							Zona(this.parent.parent).cartaSelectB = false;
						}
						
					}
					
				}
				//opcionesCarta();
				coCarta.close();
				
			}
			
			private function opcionesCarta():void{
				if(borde){
					coCarta.open(this);
					//opt = true;
				} else {
					coCarta.close();
					//opt = false;
				}
			}
			
			private function set seleccion(val:Boolean):void{
				opcionesCarta();
			}
			
			protected function lineaAtaque_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(this.parent['className'] == 'Zona'){
					this.accion = '';	
					this.accion = 'ataque';	
				} else {
					this.accion = 'ataque';
					fnAccion('ataque');
				}
				
			
				coCarta.close();
			}
			
			
			protected function lineaDefensa_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(this.parent['className'] == 'Zona'){
					this.accion = 'defendiendo' + event.target.label;	
				} else {
					this.accion = 'defendiendo' + event.target.label;
					fnAccion('defendiendo' + event.target.label);
				}
			}
			
			private function fnEfecto(event:MouseEvent):void{
				modelApp.partidaView.fnBtnEfecto.call(this, this);
			}
			
			public function fnAccion(val:String, pagar:Boolean = true):void{
				var zNeutral:Zona = modelApp.partidaView.zonaDefensaPropia;
				var zDefensa:Zona = modelApp.partidaView.zonaDefendiendoPropia;
				var zAtaque:Zona = modelApp.partidaView.zonaAtaqueOponente;
				var indice:int;
				borde = false;
				accion = val;
				switch(val){
					case 'zonaDefensaPropia':						
						if(this.parent) {
							if(this.parent['className'] == 'Zona'){
								PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaDefensaPropia.addElement(this);
								this.enJuego = false;
								this.enJuego = true;
							} else {
								PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaDefensaPropia.addElement(this.parent as IVisualElement);
								this.parent['enJuego'] = true;
							}	
							
						} else {
							modelApp.partidaView.zonaDefensaPropia.addElement(this);
						}
						
						if(this.contenedorAnterior == 'zonaManoPropia' || this.contenedorAnterior == 'zonaCastilloPropia' || this.contenedorAnterior == 'zonaCementerioPropia'){
							if(pagar){
								for(var i:int = 0; i < this.cartaVO.coste; i++){
									Carta(modelApp.partidaView.zonaOroPropia.getElementAt(0)).fnAccion('zonaOroPagadoPropia');
									//duelo.zonaOroPagado.addItem(duelo.zonaOroPropia.removeItemAt(duelo.zonaOroPropia.length - 1));
									
								}
							}
							/*modelApp.partidaView.dispIngresoJuego(this);
							var desde:String = this.contenedor.replace(this.propietario, this.envio);
							modelApp.partidaView.enviaEfecto([{id: this.cartaVO.id, desde: desde}], 'zonaDefensaOponente');*/
						}
						enJuego = true;
						
						break;
					case 'zonaDefensaOponente':
						if(this.parent) {
							if(this.parent['className'] == 'Zona'){
								PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaDefensaOponente.addElement(this);
								
							} else {
								PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaDefensaOponente.addElement(this.parent as IVisualElement);
								
							}	
						} else {
							modelApp.partidaView.zonaDefensaOponente.addElement(this);
						}
						enJuego = true;
						break;
					case 'zonaAtaquePropia':
						if(this.parent['className'] == 'Zona'){
							PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaAtaquePropia.addElement(this);
							
						} else {
							PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaAtaquePropia.addElement(this.parent as IVisualElement);
							
						}
						enJuego = true;
						break;
					case 'zonaAtaqueOponente':
						if(this.parent['className'] == 'Zona'){
							PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaAtaqueOponente.addElement(this);
							
						} else {
							PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaAtaqueOponente.addElement(this.parent as IVisualElement);
							
						}
						enJuego = true;
						break;
					case 'zonaDefendiendoDefensa':
						//PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaAtaque.addElement(this);
						
						//var zNeutral:Zona = PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaDefensa;
						if(this.parent['className'] == 'Zona'){
							zDefensa.addElementAt(this, 0);	
						} else {
							//PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaAtaque.addElement(this.parent as IVisualElement);
							zDefensa.addElementAt(this.parent as IVisualElement, 0);
						}
						if(zAtaque.cartaSelect.parent['className'] == 'Zona'){
							zAtaque.addElementAt(zAtaque.removeElement(zAtaque.cartaSelect) as Carta, 0);								
						} else {
							zAtaque.addElementAt(zAtaque.removeElement(zAtaque.cartaSelect.parent as GCartas) as GCartas, 0);	
						}
						
						zAtaque.cartaSelect.borde = false;
						zAtaque.cartaSelect.enabled = false;
						zAtaque.cartaSelect = null;
						zAtaque.cartaSelectB = false;
						enJuego = true;
						break;
					case 'zonaDefendiendoReversar':
						//var zNeutral:Zona = PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaDefensa;
						if(this.parent['className'] == 'Zona'){
							indice = zDefensa.getElementIndex(this);						
							zNeutral.addElement(this);
						} else {
							//PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaAtaque.addElement(this.parent as IVisualElement);
							indice = zDefensa.getElementIndex(this.parent as IVisualElement);						
							zNeutral.addElement(this.parent as IVisualElement);
						}
						
						var carta:Carta = zAtaque.removeElementAt(indice) as Carta
						carta.enabled = true;
						zAtaque.addElement(carta);
						enJuego = true;
						break;
						
						
					case 'zonaDefendiendoOponente':
						if(this.parent['className'] == 'Zona'){
							PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaAtaqueOponente.addElement(this);
							
						} else {
							PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaAtaqueOponente.addElement(this.parent as IVisualElement);
							
						}
						enJuego = true;
						break;
					case 'zonaCementerioPropia':
						
						if(this.parent) {
							if(this.parent['className'] == 'Zona' && this.cartaVO.tipo == 'Talismán'){
								//PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaDefensaPropia.addElement(this);
								this.enJuego = true;
								this.enJuego = false;
							}	
							
						} else {
							modelApp.partidaView.zonaDefensaPropia.addElement(this);
						}
						
						if(this.parent['className'] == 'Zona'){
							PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaCementerioPropia.addElement(this);
						
								
						} else {
							PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaCementerioPropia.addElement(this.parent as IVisualElement);
						
						}
						if(this.contenedorAnterior == 'zonaManoPropia' || this.contenedorAnterior == 'zonaCastilloPropia' || this.contenedorAnterior == 'zonaCementerioPropia'){
							if(pagar){
								for(i = 0; i < this.cartaVO.coste; i++){
									Carta(modelApp.partidaView.zonaOroPropia.getElementAt(0)).fnAccion('zonaOroPagadoPropia');
									//duelo.zonaOroPagado.addItem(duelo.zonaOroPropia.removeItemAt(duelo.zonaOroPropia.length - 1));
									
								}
							}
							/*modelApp.partidaView.dispIngresoJuego(this);
							var desde:String = this.contenedor.replace(this.propietario, this.envio);
							modelApp.partidaView.enviaEfecto([{id: this.cartaVO.id, desde: desde}], 'zonaDefensaOponente');*/
						}
						enJuego = false;
						break;
					case 'zonaCementerioOponente':
						if(this.parent['className'] == 'Zona'){
							PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaCementerioOponente.addElement(this);
							
							
						} else {
							PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaCementerioOponente.addElement(this.parent as IVisualElement);
							
						}
						enJuego = false;
						break;
					case 'zonaDestierroPropia':
						if(this.parent['className'] == 'Zona'){
							PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaDestierroPropia.addElement(this);
							
							
						} else {
							PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaDestierroPropia.addElement(this.parent as IVisualElement);
							
						}
						enJuego = false;
					case 'zonaDestierroOponente':
						if(this.parent['className'] == 'Zona'){
							PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaDestierroOponente.addElement(this);
							
							
						} else {
							PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaDestierroOponente.addElement(this.parent as IVisualElement);
							
						}
						enJuego = false;
						break;
					case 'zonaManoPropia':
						if(this.parent['className'] == 'Zona'){
							modelApp.partidaView.zonaManoPropia.addElement(this);
							
							
						} else {
							PartidaView(MitosFlex(this.parentApplication).navigator.activeView).zonaDestierroOponente.addElement(this.parent as IVisualElement);
							
						}
						enJuego = false;
						break;
					case 'zonaManoOponente':
						if(this.parent == null || this.parent['className'] == 'Zona'){
							modelApp.partidaView.zonaManoOponente.addElement(this);
						
							
						} else {
							modelApp.partidaView.zonaManoOponente.addElement(this.parent as IVisualElement);
						
						}
						enJuego = false;
						break;
					case 'zonaOroPropia':
						modelApp.partidaView.zonaOroPropia.addElement(this);
						modelApp.partidaView.reserva = '' + modelApp.partidaView.zonaOroPropia.numElements;
						break;
					case 'zonaOroOponente':
						modelApp.partidaView.zonaOroOponente.addElement(this);
						
						
						
						break;
					case 'zonaOroPagadoPropia':
						modelApp.partidaView.zonaOroPagadoPropia.addElement(this);
						
						
						modelApp.partidaView.reserva = '' + modelApp.partidaView.zonaOroPropia.numElements;
						break;
					case 'zonaOroPagadoOponente':
						modelApp.partidaView.zonaOroPagadoOponente.addElement(this);
						
						
						
						break;
					case 'zonaApoyoPropia':
						modelApp.partidaView.zonaApoyoPropia.addElement(this);
						
						
						
						break;
					case 'zonaApoyoOponente':
						modelApp.partidaView.zonaOroOponente.addElement(this);
						
						
						
						break;
					case 'zonaCastilloPropia':
						modelApp.partidaView.zonaCastilloPropia.addElement(this);
						enJuego = false;
						
						
						break;
					case 'zonaCastilloOponente':
						modelApp.partidaView.zonaCastilloOponente.addElement(this);
						enJuego = false;
						
						
						break;
				}
				btnEfecto = enJuego && cartaVO.btnEfecto;
			}
			
			
			protected function coCarta_openHandler(event:PopUpEvent):void
			{
				// TODO Auto-generated method stub
				var zona:Zona;
				if(this.parent['className'] == 'Zona'){
					zona = this.parent as Zona;
				} else {
					zona = this.parent.parent as Zona;
				}
				
				
				if((zona.id == 'zonaManoPropia' && modelApp.partidaView.popMano.btnMulligan == false) || zona.id == 'zonaArma' 
					|| zona.id == 'zonaObjetivo' || zona.id == 'zonaEfecto' || (zona.id == 'zonaAtaqueOponente' && modelApp.duelo.fase == Duelo.DEFENSA)){
					selectHab = true;					
					
				} else {
					selectHab = false;
				}
				if(modelApp.duelo.fase == Duelo.DEFENSA){
					if(zona.id == 'zonaDefensa'){
						defensa = true;
						reversaDefensa = false;
					} else if(zona.id == 'zonaDefendiendo'){
						defensa = false;
						reversaDefensa = true;
					}	
				} else {
					defensa = false;
					reversaDefensa = false;
				}
				
				
			}
			
			private function set fnDispIngresoJuego(val:Boolean):void{
				if(val){
					if(cartaVO.fnDispIngresoJuego != null && propietario == 'Propia'){
						cartaVO.fnDispIngresoJuego.call(this, this);
					}
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:Callout id="coCarta" focusOut="{coCarta.close()}" open="coCarta_openHandler(event)">
			<s:VGroup paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10" horizontalAlign="center">
				<s:Button label="Seleccionar" click="cartaClick_clickHandler(event)" visible="{selectHab}" includeInLayout="{selectHab}"/>
				<s:Button label="Información" click="infoCarta_clickHandler(event)"/>
				<s:Button label="Ataque" visible="@{includeInLayout}" includeInLayout="{modelApp.duelo.fase == 3 ? ((ataqueHabilitado ? (enJuego ? true : false) : false) ? true : false) : false}" click="lineaAtaque_clickHandler(event)"/>
				<s:Button label="Defensa" includeInLayout="{defensa}" visible="{defensa}" click="lineaDefensa_clickHandler(event)"/>
				<s:Button label="Reversar" includeInLayout="{reversaDefensa}" visible="{reversaDefensa}" click="lineaDefensa_clickHandler(event)"/>
				<s:Button label="Efecto" includeInLayout="{btnEfecto}" visible="{btnEfecto}" click="fnEfecto(event)"/>
				<s:Button label="Cerrar" click="{coCarta.close()}"/>
			</s:VGroup>
		</s:Callout>
	</fx:Declarations>
	<fx:Binding source="borde" destination="seleccion"/>
	<fx:Binding source="enJuego" destination="fnDispIngresoJuego"/>
	<s:Rect width="100%" height="100%" visible="{borde}">
		<s:fill>
			<s:SolidColor color="0x000000"/>
		</s:fill>
	</s:Rect>	
	<s:Image id="imgCarta" width="90%" height="80%" horizontalCenter="0" bottom="0" source="{img}"/>
	<s:Label text="{cartaVO.tipo}" width="100%" height="5%" fontSize="12" top="0" right="0" color="0xcccccc"/>
	<!--<s:Button right="5" top="8" width="25" height="25" label="i" click="infoCarta_clickHandler(event)"/>-->
</s:BorderContainer>
